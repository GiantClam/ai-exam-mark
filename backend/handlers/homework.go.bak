package handlers

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/GiantClam/homework_marking/models"
	"github.com/GiantClam/homework_marking/services"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// 提示词模板
const (
	mathPromptTemplate = `请分析以下数学作业：
学生姓名：{{.name}}
作业内容：{{.content}}

请仔细分析学生的答案，特别关注：
1. 计算是否正确
2. 思路是否清晰
3. 解题方法是否合理

请以JSON格式返回分析结果。`

	englishPromptTemplate = `请分析以下英语作业：
学生姓名：{{.name}}
作业内容：{{.content}}

请仔细分析学生的答案，特别关注：
1. 语法是否正确
2. 拼写是否准确
3. 表达是否恰当

请以JSON格式返回分析结果。`

	chinesePromptTemplate = `请分析以下语文作业：
学生姓名：{{.name}}
作业内容：{{.content}}

请仔细分析学生的答案，特别关注：
1. 内容是否完整
2. 表达是否准确
3. 思路是否清晰

请以JSON格式返回分析结果。`

	generalPromptTemplate = `请分析以下作业：
学生姓名：{{.name}}
作业内容：{{.content}}

请仔细分析学生的答案，特别关注：
1. 答案是否准确
2. 表达是否清晰
3. 思路是否合理

请以JSON格式返回分析结果。`
)

// HomeworkHandler handles homework related requests
type HomeworkHandler struct {
	taskService *services.TaskService
}

// NewHomeworkHandler creates a new homework handler
func NewHomeworkHandler(taskService *services.TaskService) *HomeworkHandler {
	return &HomeworkHandler{
		taskService: taskService,
	}
}

// UploadHomework handles homework file upload requests
func (h *HomeworkHandler) UploadHomework(c *gin.Context) {
	// 获取文件
	file, err := c.FormFile("homework")
	if err != nil {
		c.JSON(http.StatusBadRequest, models.APIResponse{
			Success: false,
			Error:   "请上传作业文件",
		})
		return
	}

	// 检查文件类型
	filename := file.Filename
	extension := strings.ToLower(filepath.Ext(filename))
	if extension != ".pdf" && extension != ".jpg" && extension != ".jpeg" && extension != ".png" {
		c.JSON(http.StatusBadRequest, models.APIResponse{
			Success: false,
			Error:   "只支持PDF、JPG、JPEG和PNG格式的文件",
		})
		return
	}

	// 获取作业类型
	homeworkType := c.DefaultPostForm("type", "general")
	
	// 获取自定义提示词
	customPrompt := c.DefaultPostForm("prompt", "")

	// 创建唯一的文件名
	uniqueID := uuid.New().String()
	uploadDir := "uploads"
	uploadPath := filepath.Join(uploadDir, uniqueID+extension)

	// 保存文件
	if err := c.SaveUploadedFile(file, uploadPath); err != nil {
		log.Printf("[ERROR] 保存文件失败: %v", err)
		c.JSON(http.StatusInternalServerError, models.APIResponse{
			Success: false,
			Error:   "保存文件失败",
		})
		return
	}

	// 创建异步任务
	taskID := h.taskService.CreateTask("homework_processing", "正在处理文件...")
	
	// 立即返回任务ID
	c.JSON(http.StatusOK, models.APIResponse{
		Success: true,
		Data: gin.H{
			"taskId": taskID,
			"message": "文件上传成功，正在处理中...",
		},
	})

	// 异步处理文件
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("[ERROR] 处理文件时发生异常: %v", r)
				h.taskService.UpdateTaskStatus(taskID, "error", fmt.Sprintf("处理文件时发生异常: %v", r))
			}
		}()

		// 更新任务状态
		h.taskService.UpdateTaskStatus(taskID, "processing", "正在分析文件内容...")

		// 处理文件，根据文件类型选择不同的处理方式
		var result string
		var err error

		if extension == ".pdf" {
			// PDF处理逻辑
			result, err = h.processPDFHomework(uploadPath, homeworkType, customPrompt)
		} else {
			// 图片处理逻辑
			result, err = h.processImageHomework(uploadPath, homeworkType, customPrompt)
		}

		if err != nil {
			log.Printf("[ERROR] 处理文件失败: %v", err)
			h.taskService.UpdateTaskStatus(taskID, "error", fmt.Sprintf("处理文件失败: %v", err))
			return
		}

		// 更新任务状态为完成
		h.taskService.UpdateTaskStatus(taskID, "completed", result)
	}()
}

// 处理PDF作业
func (h *HomeworkHandler) processPDFHomework(pdfPath, homeworkType, customPrompt string) (string, error) {
	// 实现PDF处理逻辑
	log.Printf("[INFO] 处理PDF作业: %s, 类型: %s", pdfPath, homeworkType)
	
	// 这里可以添加PDF转换为图片、OCR识别等逻辑
	
	// 暂时返回模拟结果
	mockResult := map[string]interface{}{
		"analysis": "这是PDF作业的分析结果",
		"score": 85,
		"feedback": "整体表现良好，但有些地方需要改进",
	}
	
	resultJSON, err := json.Marshal(mockResult)
	if err != nil {
		return "", err
	}
	
	return string(resultJSON), nil
}

// 处理图片作业
func (h *HomeworkHandler) processImageHomework(imagePath, homeworkType, customPrompt string) (string, error) {
	log.Printf("[DEBUG] 开始处理作业图片: %s, 类型: %s", imagePath, homeworkType)

	// 检查图片文件是否存在
	if _, err := os.Stat(imagePath); os.IsNotExist(err) {
		log.Printf("[ERROR] 图片文件不存在: %s", imagePath)
		return "", fmt.Errorf("图片文件不存在: %s", imagePath)
	}

	// 检查图片文件是否可读
	if _, err := os.Open(imagePath); err != nil {
		log.Printf("[ERROR] 无法打开图片文件: %v", err)
		return "", fmt.Errorf("无法打开图片文件: %v", err)
	}

	// 创建AI客户端
	client := services.NewVertexAIClient()
	log.Printf("[DEBUG] 创建AI客户端成功")

	// 根据作业类型设置系统指令
	var systemInstruction string
	switch homeworkType {
	case "english":
		systemInstruction = `
		你是一位专业的英语老师。
		特别注意：
		1. 重点识别模拟题
		2. 区分学生的手写内容和印刷的题目内容
		3. 判断答案的英语作业图片，提取其中的手写答案。

		请以下面的JSON格式回答：
		{
		  "answers": [
		    {
		      "questionNumber": "题号",
		      "studentAnswer": "学生的手写答案",
		      "isCorrect": true/false,
		      "correctAnswer": "正确答案（可双栏布局）",
		      "explanation": "简短答案解释"
		    }
		  ],
		  "overallScore": "总得分",
		  "feedback": "整体评价和建议"
		}
		
		请只返回标准JSON格式数据，不要使用Markdown代码块；不要分析右半部分的内容，从上到下处理。
		不要分析右半部分的内容，从上到下处理。
		不要分析右半部分的内容，从上到下处理。`

	case "chinese":
		systemInstruction = `
		你是一位专业的语文老师。
		特别注意：
		1. 重点识别模拟题
		2. 区分学生的手写内容和印刷的题目内容
		3. 判断答案的准确性和完整性
		4. 提供详细的解释和建议。不要使用Markdown的代码块标记。`

		// 请以下面的JSON格式回答省略，与英语格式类似

	case "math":
		systemInstruction = `
		你是一位专业的数学老师。
		特别注意：
		1. 重点识别模拟题
		2. 区分学生的手写内容和印刷的题目内容
		3. 识别数学符号
		4. 判断数学公式`

		// 请以下面的JSON格式回答省略，与英语格式类似

	default:
		systemInstruction = `
		请分析学生的作业图片，提取其中的内容。
		特别注意：
		1. 重点识别模拟题
		2. 区分学生的手写内容和印刷的题目内容`

		// 请以下面的JSON格式回答省略，与英语格式类似
	}

	log.Printf("[DEBUG] 系统指令长度: %d 字符", len(systemInstruction))

	// 设置提示词 - 使用传入的自定义提示词或者创建一个基本提示词
	textPrompt := customPrompt
	if textPrompt == "" {
		textPrompt = fmt.Sprintf("这是一份%s作业，请分析图片中的内容，从上到下处理。", homeworkType)
	}

	log.Printf("[DEBUG] 提示词长度: %d 字符", len(textPrompt))

	// 调用Gemini模型分析图片
	response, err := client.GenerateContentWithFile(systemInstruction, imagePath, "image/jpeg", textPrompt)
	if err != nil {
		log.Printf("[ERROR] AI服务处理失败: %v", err)
		return "", fmt.Errorf("AI服务处理失败: %v", err)
	}

	// 验证返回的JSON格式
	var jsonResult interface{}
	if err := json.Unmarshal([]byte(response), &jsonResult); err != nil {
		log.Printf("[ERROR] 解析AI返回的JSON失败: %v", err)
		return "", fmt.Errorf("解析AI返回的JSON失败: %v", err)
	}

	log.Printf("[DEBUG] 成功处理作业图片，返回结果长度: %d 字符", len(response))
	return response, nil
}
